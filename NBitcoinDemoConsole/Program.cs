using Microsoft.Extensions.Configuration;
using NBitcoin;
using NBitcoin.RPC;
using System;
using System.Collections.Generic;

namespace NBitcoinDemoConsole
{
	internal class Program
    {
        static void Main(string[] args)
        {
			Network network = Network.RegTest;

			IConfiguration config = new ConfigurationBuilder()
				.AddJsonFile("appsettings.json")
				.AddEnvironmentVariables()
				.Build();

			Settings settings = config.GetRequiredSection("Settings").Get<Settings>();

			Console.WriteLine($"Connecting to {network.Name}");

			RPCClient rpcClientInitial = SetupRpcClient(settings, network);

			// get blockcahin information
			BlockchainInfo blockchainInfo = rpcClientInitial.GetBlockchainInfo();
			Console.WriteLine($"Blockchain Blocks: {blockchainInfo.Blocks}");
			Console.WriteLine($"Blockchain Mining Difficulty: {blockchainInfo.Difficulty}");
			Console.WriteLine($"Blockchain Best Blockhash: {blockchainInfo.BestBlockHash}");
			Console.WriteLine();

			// create two new wallets (to hold private keys, public keys, addresses)
			string walletName1 = "walletTest01";
			string walletName2 = "walletTest02";
			rpcClientInitial.CreateWallet(walletName1);
			rpcClientInitial.CreateWallet(walletName2);

			// initialize new clients with the wallet name prefixed
			RPCClient rpcClientWallet1 = SetupRpcClient(settings, network, walletName1);
			RPCClient rpcClientWallet2 = SetupRpcClient(settings, network, walletName2);

			// manually create a private key, public key, and bitcoin address in the first wallet
			Key privateKey = new Key();
			Console.WriteLine($"New Key created: Private Key: {privateKey.GetWif(network)}");

			PubKey publicKey = privateKey.PubKey;
			Console.WriteLine($"Public Key: {publicKey}");

			BitcoinAddress bitcoinAddressManuallyCreatedWallet1 = publicKey.GetAddress(ScriptPubKeyType.Segwit, network);
			Console.WriteLine($"Manually Created Private Key/Public Key and Bitcoin Address: {bitcoinAddressManuallyCreatedWallet1.ToString()}");
			Console.WriteLine();
			rpcClientWallet1.ImportPrivKey(new BitcoinSecret(privateKey, network));

			// or create an address with private key, public key creation abstracted away
			BitcoinAddress bitcoinAddressAutoGeneratedWallet1 = rpcClientWallet1.GetNewAddress();
			Console.WriteLine($"Wallet generated Bitcoin Address: {bitcoinAddressAutoGeneratedWallet1.ToString()}");
			Console.WriteLine();

			// generate blocks as a reward to each of the created addresses
			// (100 blocks must be created before rewards from mining are available to spend)
			rpcClientWallet1.GenerateToAddress(101, bitcoinAddressManuallyCreatedWallet1);
			rpcClientWallet1.GenerateToAddress(101, bitcoinAddressAutoGeneratedWallet1);
			Console.WriteLine($"Wallet1 Balance: {rpcClientWallet1.GetBalance()}");
			Console.WriteLine();

			// print the private keys associated with each of the created addresses
			IEnumerable<BitcoinSecret> secrets = rpcClientWallet1.ListSecrets();
			foreach (BitcoinSecret secret in secrets)
			{
				Console.WriteLine($"Secret for Address: {secret.PubKey.GetAddress(ScriptPubKeyType.Segwit, network)} Secret: {secret.ToString()}");
			}
			Console.WriteLine();

			UnspentCoin[] unspentCoinsWallet1 = rpcClientWallet1.ListUnspent();
			foreach (UnspentCoin unspentCoin in unspentCoinsWallet1)
			{
				Console.WriteLine($"Unspent Coin - Address: {unspentCoin.Address.ToString()} Amount: {unspentCoin.Amount.ToString()}");
			}
			Console.WriteLine();

			// generate an address for wallet2 so that we can send it bitcoin in a transaction
			BitcoinAddress bitcoinAddressAutoGeneratedWallet2 = rpcClientWallet2.GetNewAddress();

			// send 1 bitcoin from wallet1 to wallet2
			SendToAddressParameters sendToAddressParameters = new SendToAddressParameters
			{
				Comment = "Test transaction from Wallet1 address to Wallet2 address",
				SubstractFeeFromAmount = true,
				FeeRate = new FeeRate(Money.Satoshis(1001))
			};
			uint256 transactionFromWallet1toWallet2 = rpcClientWallet1.SendToAddress(bitcoinAddressAutoGeneratedWallet2, Money.Coins(1m), sendToAddressParameters);

			// simulate the mining of a block so that the transaction is finalized
			// it takes six block confirmations before the bitcoin transaction money is fully available
			rpcClientWallet1.GenerateToAddress(1, bitcoinAddressManuallyCreatedWallet1);

			// use any client to see the details of the block transaction
			GetTxOutResponse txOutResponse = rpcClientInitial.GetTxOut(transactionFromWallet1toWallet2, 0);
			Console.WriteLine($"Transaction {transactionFromWallet1toWallet2} confirmed with {txOutResponse.Confirmations} confirmations");
			Console.WriteLine($"Transaction money: {txOutResponse.TxOut.Value.ToString()}");
			Console.WriteLine();

			// see that Wallet2 has an increased balance (from receiving funds in the transaction)
			Console.WriteLine($"Wallet2 Balance: {rpcClientWallet2.GetBalance()}");

			Console.ReadLine();
		}

		public static RPCClient SetupRpcClient(Settings settings, Network network, string walletName = null)
		{
			RPCCredentialString credentialString = RPCCredentialString.Parse($"{settings.RpcUserName}:{settings.RpcPassword}");

			if (walletName != null)
			{
				credentialString.WalletName = walletName;
			}

			RPCClient rpcClient = new RPCClient(credentialString, $"localhost:{settings.Port}", network);
			return rpcClient;
		}
    }
}
